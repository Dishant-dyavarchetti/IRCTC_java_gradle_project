/*
 * This source file was generated by the Gradle 'init' task
 */
package ticket.booking;

import ticket.booking.entities.Train;
import ticket.booking.entities.User;
import ticket.booking.services.userBookingService;
import ticket.booking.utils.UserServiceUtil;
import java.util.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.UUID;

public class App {

    public static void main(String[] args) {
        System.out.println("Running Train Booking System...");
        Scanner sc = new Scanner(System.in);
        int option;
        userBookingService userBooking;
        try{
            userBooking = new userBookingService();
        }catch (IOException e){
            e.printStackTrace();
            System.out.println("There is something wrong in it");
            return;
        }
        Train trainSelectedBooking = new Train();
        String source = "";
        String destination = "";

//        application start
        do{
            System.out.println("Enter the Option: ");
            System.out.println("1)Sign Up");
            System.out.println("2)login");
            System.out.println("3)Fetch Booking");
            System.out.println("4)Search Trains");
            System.out.println("5)Book a seat");
            System.out.println("6)Cancel by booking");
            System.out.println("7)Exit the application");
            System.out.print("Enter the option: ");
            option = sc.nextInt();
            switch (option){
                case 1:
                    System.out.println("SignUp Page");
                    System.out.println("Enter the user name of the user: ");
                    String name = sc.next();
                    System.out.println("Enter the password of the user: ");
                    String password = sc.next();
                    User newUser = new User(UUID.randomUUID().toString(), name, password, UserServiceUtil.hashPassword(password), new ArrayList<>());

                    userBooking.signUp(newUser);
                    System.out.println("User signed up successfully, you can login now...");
                    break;
                case 2:
                    System.out.println("Enter the username to login: ");
                    String nameToLogin = sc.next();
                    System.out.println("Enter the password to login: ");
                    String passToLogin = sc.next();
                    User userToLogin = new User(UUID.randomUUID().toString(), nameToLogin, passToLogin, UserServiceUtil.hashPassword(passToLogin), new ArrayList<>());
                    try{
                        userBooking = new userBookingService(userToLogin);
                        if(userBooking.userLogin()){
                            System.out.println("User Login Successfull....");
                        }else{
                            System.out.println("Invalid username or password...");
                        }

                    } catch (IOException e) {
                        System.out.println("Error occured during loggin in..");
                    }
                    break;
                case 3:
                    System.out.println("Fetching Booking details of the user: ");
                    userBooking.fetchBooking();
                    break;
                case 4:
                    System.out.println("Enter the source station");
                    source = sc.next();
                    System.out.println("Enter the destination station");
                    destination = sc.next();
                    try{
                        List<Train> trains = userBooking.getTrain(source, destination);
                        int index = 1;
                        for(Train t: trains){
                            System.out.println(index + ")Train Id: " + t.getTrainId());
                            for(Map.Entry<String, String> entry: t.getStationTimes().entrySet()){
                                System.out.println("    station " + entry.getKey() + " time: " + entry.getValue());
                            }
                        }
                        System.out.println("Select the train by selecting the number 1,2,3...");
//                        Int num = (sc.nextInt() - 1);
                        trainSelectedBooking = trains.get((sc.nextInt() - 1));
                        System.out.println("Train selected, now you can proceed with the seat booking of the train...");
                    }catch(RuntimeException e){
                        e.printStackTrace();
                        System.out.println("There are no stations available which was entered in the source and destination");
                    }

                    break;
                case 5:
                    try{
                        System.out.println("Select the seats out of these seats: ");
                        List<List<Integer>> seats = userBooking.fetchSeats(trainSelectedBooking);
                        for(List<Integer> row: seats) {
                            for (Integer val : row) {
                                System.out.println(val + " ");
                            }
                            System.out.println();
                        }
                        System.out.println("Select the seat by typing the row and column");
                        System.out.println("Enter the row");
                        int row = sc.nextInt();
                        System.out.println("Enter the column");
                        int col = sc.nextInt();
                        System.out.println("Booking your seat....");
                        Boolean booked = userBooking.bookTrainSeat(trainSelectedBooking, row, col, source, destination);
                        if(booked.equals(Boolean.TRUE)){
                            System.out.println("Booked! Enjoy your journey");
                        }else{
                            System.out.println("Can't book this seat");
                        }


                    } catch (RuntimeException e) {
                        System.out.println("Train not selected from the option 4,first select train before booking the seat");
//                        e.printStackTrace();

                    }
                    break;
                case 6:
                    System.out.println("Enter the ticket id of which you want to cancel the booking...");
                    String inputTicketId = sc.next();
                    userBooking.cancelBooking(inputTicketId);
                    break;
                case 7:
                    System.out.println("Exiting from the application");
                    break;

            }
        }while(option != 7);
    }
}
